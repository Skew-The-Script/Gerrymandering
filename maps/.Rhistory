library(redist)
library(ggplot2)
library(readr)
library(dplyr)
#library(devtools)
#devtools::install_github("alarm-redist/ggredist")
library(ggredist)
library(ggrepel)
library(tigris)
library(purrr)
library(sf)
library(scales)
library(patchwork)
PAL_COAST = c("#7BAEA0", "#386276", "#3A4332", "#7A7D6F", "#D9B96E", "#BED4F0")
PAL_LARCH = c("#D2A554", "#626B5D", "#8C8F9E", "#858753", "#A4BADF", "#D3BEAF")
PAL = PAL_COAST[c(5, 1, 2, 4, 3, 6)]
GOP_DEM <- c("#A0442C", "#B25D4C", "#C27568", "#D18E84", "#DFA8A0",
"#EBC2BC",  "#F6DCD9", "#F9F9F9", "#DAE2F4", "#BDCCEA",
"#9FB6DE", "#82A0D2", "#638BC6", "#3D77BB", "#0063B1")
ggplot2::theme_set(ggplot2::theme_bw())
lbl_party = function(x) {
if_else(x == 0.5, "Even",
paste0(if_else(x < 0.5, "R+", "D+"), number(200*abs(x-0.5), 1)))
}
lbl_party_zero = function(x) {
if_else(x == 0.0, "Even",
paste0(if_else(x < 0.0, "D+", "R+"), number(100*abs(x), 1)))
}
scale_fill_party_b <- function(name="Democratic share", midpoint=0.5, limits=0:1,
labels=lbl_party, oob=squish, ...) {
scale_fill_steps2(name=name, ..., low = GOP_DEM[1], high = GOP_DEM[15],
midpoint=midpoint, limits=limits, labels=labels, oob=oob)
}
scale_fill_party_c <- function(name="Democratic share", midpoint=0.5, limits=0:1,
labels=lbl_party, oob=squish, ...) {
scale_fill_gradient2(name=name, ..., low = GOP_DEM[1], high = GOP_DEM[15],
midpoint=midpoint, limits=limits, labels=labels, oob=oob)
}
scale_color_party_c <- function(name="Democratic share", midpoint=0.5, limits=0:1,
labels=lbl_party, oob=squish, ...) {
scale_color_gradient2(name=name, ..., low = GOP_DEM[1], high = GOP_DEM[15],
midpoint=midpoint, limits=limits, labels=labels, oob=oob)
}
scale_color_party_d = function(...) {
scale_color_manual(..., values=c(GOP_DEM[2], GOP_DEM[14]),
labels=c("Rep.", "Dem."))
}
qile_english = function(x, ref, extra="") {
qile = mean(ref <= x)
if (diff(range(ref)) == 0) {
"in line with the"
} else if (qile < 0.35) {
str_glue("less {extra}than {percent(1 - qile)} of all")
} else if (qile > 0.65) {
str_glue("more {extra}than {percent(qile)} of all")
} else {
"in line with the"
}
}
plot_cds = function(map, pl, county, abbr, qty="plan", city=FALSE, coverage=TRUE) {
if (n_distinct(pl) > 6)
plan = redist:::color_graph(get_adj(map), as.integer(pl))
else
plan = pl
places = suppressMessages(tigris::places(abbr, cb=TRUE))
if (city) {
cities = arrange(places, desc(ALAND)) %>%
filter(LSAD == "25") %>%
head(4) %>%
st_centroid() %>%
suppressWarnings()
}
if (qty == "dem") {
qty = expr(dem)
scale = scale_fill_party_b("Two-party\nvote margin", limits=c(0.35, 0.65))
} else {
qty = expr(.plan)
scale = scale_fill_manual(values=PAL, guide="none")
}
cty_val = rlang::eval_tidy(rlang::enquo(county), map)
if (n_distinct(cty_val) == nrow(map)) county = 1L
counties = map %>%
as_tibble() %>%
st_as_sf() %>%
group_by({{ county }}) %>%
summarize(is_coverage=coverage)
map %>%
mutate(.plan = as.factor(plan),
.distr = as.integer(pl),
dvote = map$ndv,
rvote = map$nrv) %>%
as_tibble() %>%
st_as_sf() %>%
group_by(.distr) %>%
summarize(.plan = .plan[1],
dem = 1 / (1 + sum(rvote, na.rm=T) / sum(dvote, na.rm=T)),
is_coverage=coverage) %>%
ggplot(aes(fill={{ qty }})) +
geom_sf(size=0.0) +
geom_sf(data=places, inherit.aes=FALSE, fill="#00000033", color=NA) +
geom_sf(fill=NA, size=0.4, color="black") +
geom_sf(data=counties, inherit.aes=FALSE, fill=NA, size=0.45, color="#ffffff2A") +
{if (city) ggrepel::geom_text_repel(aes(label=NAME, geometry=geometry),
data=cities, color="#000000", fontface="bold",
size=3.5, inherit.aes=FALSE, stat="sf_coordinates")} +
scale +
theme_void() +
theme(legend.key.size=unit(0.75, "cm"))
}
### Data from here: https://github.com/alarm-redist/fifty-states
oregon_map <- read_rds("../data/OR_cd_2020_map.rds")
oregon_plans <- read_rds('../data/OR_cd_2020_plans.rds')
oregon_stats <- read.csv('../data/OR_cd_2020_stats.csv')
abbr <- "OR"
View(oregon_plans)
?paste
paste("../data/",abbr,"_cd_2020_map.rds", sep = "")
## Set to state you'd like to plot abbr
abbr <- "OR"
### Data from here: https://github.com/alarm-redist/fifty-states
map <- read_rds(paste("../data/",abbr,"_cd_2020_map.rds", sep = ""))
plans <- read_rds(paste("../data/",abbr,"_cd_2020_plans.rds", sep = ""))
stats <- read.csv(paste("../data/",abbr,"_cd_2020_stats.csv", sep = ""))
state_plans <- left_join(plans, stats, by = c("draw","district","total_pop"))
m <- as.matrix(state_plans)
n_ref = redist:::get_n_ref(state_plans)
N = ncol(m) - n_ref
set.seed(5118)
idxs = sample(N, 3, replace=FALSE)
while (all(m[, idxs[1]] == m[, idxs[2]]))
idxs[2] = sample(N, 1)
while (all(m[, idxs[1]] == m[, idxs[3]]) || all(m[, idxs[2]] == m[, idxs[3]]))
idxs[3] = sample(N, 1)
enacted <- plot_cds(map, map$cd_2020, county, abbr, "dem") +
labs(title=~underline("Enacted 2020 Plan"))
enacted
enacted
enacted <- plot_cds(map, map$cd_2020, county, abbr, "dem") +
labs(title=~underline("Current Plan"))
enacted
plot_cds(oregon_map, m[, idxs[1]], county, abbr, "dem") +
labs(title=~underline("Sample Plan 1"))
seq(1:50)
idxs
library(redist)
library(ggplot2)
library(readr)
library(dplyr)
#library(devtools)
#devtools::install_github("alarm-redist/ggredist")
library(ggredist)
library(ggrepel)
library(tigris)
library(purrr)
library(sf)
library(scales)
library(patchwork)
PAL_COAST = c("#7BAEA0", "#386276", "#3A4332", "#7A7D6F", "#D9B96E", "#BED4F0")
PAL_LARCH = c("#D2A554", "#626B5D", "#8C8F9E", "#858753", "#A4BADF", "#D3BEAF")
PAL = PAL_COAST[c(5, 1, 2, 4, 3, 6)]
GOP_DEM <- c("#A0442C", "#B25D4C", "#C27568", "#D18E84", "#DFA8A0",
"#EBC2BC",  "#F6DCD9", "#F9F9F9", "#DAE2F4", "#BDCCEA",
"#9FB6DE", "#82A0D2", "#638BC6", "#3D77BB", "#0063B1")
ggplot2::theme_set(ggplot2::theme_bw())
lbl_party = function(x) {
if_else(x == 0.5, "Even",
paste0(if_else(x < 0.5, "R+", "D+"), number(200*abs(x-0.5), 1)))
}
lbl_party_zero = function(x) {
if_else(x == 0.0, "Even",
paste0(if_else(x < 0.0, "D+", "R+"), number(100*abs(x), 1)))
}
scale_fill_party_b <- function(name="Democratic share", midpoint=0.5, limits=0:1,
labels=lbl_party, oob=squish, ...) {
scale_fill_steps2(name=name, ..., low = GOP_DEM[1], high = GOP_DEM[15],
midpoint=midpoint, limits=limits, labels=labels, oob=oob)
}
scale_fill_party_c <- function(name="Democratic share", midpoint=0.5, limits=0:1,
labels=lbl_party, oob=squish, ...) {
scale_fill_gradient2(name=name, ..., low = GOP_DEM[1], high = GOP_DEM[15],
midpoint=midpoint, limits=limits, labels=labels, oob=oob)
}
scale_color_party_c <- function(name="Democratic share", midpoint=0.5, limits=0:1,
labels=lbl_party, oob=squish, ...) {
scale_color_gradient2(name=name, ..., low = GOP_DEM[1], high = GOP_DEM[15],
midpoint=midpoint, limits=limits, labels=labels, oob=oob)
}
scale_color_party_d = function(...) {
scale_color_manual(..., values=c(GOP_DEM[2], GOP_DEM[14]),
labels=c("Rep.", "Dem."))
}
qile_english = function(x, ref, extra="") {
qile = mean(ref <= x)
if (diff(range(ref)) == 0) {
"in line with the"
} else if (qile < 0.35) {
str_glue("less {extra}than {percent(1 - qile)} of all")
} else if (qile > 0.65) {
str_glue("more {extra}than {percent(qile)} of all")
} else {
"in line with the"
}
}
plot_cds = function(map, pl, county, abbr, qty="plan", city=FALSE, coverage=TRUE) {
if (n_distinct(pl) > 6)
plan = redist:::color_graph(get_adj(map), as.integer(pl))
else
plan = pl
places = suppressMessages(tigris::places(abbr, cb=TRUE))
if (city) {
cities = arrange(places, desc(ALAND)) %>%
filter(LSAD == "25") %>%
head(4) %>%
st_centroid() %>%
suppressWarnings()
}
if (qty == "dem") {
qty = expr(dem)
scale = scale_fill_party_b("Two-party\nvote margin", limits=c(0.35, 0.65))
} else {
qty = expr(.plan)
scale = scale_fill_manual(values=PAL, guide="none")
}
cty_val = rlang::eval_tidy(rlang::enquo(county), map)
if (n_distinct(cty_val) == nrow(map)) county = 1L
counties = map %>%
as_tibble() %>%
st_as_sf() %>%
group_by({{ county }}) %>%
summarize(is_coverage=coverage)
map %>%
mutate(.plan = as.factor(plan),
.distr = as.integer(pl),
dvote = map$ndv,
rvote = map$nrv) %>%
as_tibble() %>%
st_as_sf() %>%
group_by(.distr) %>%
summarize(.plan = .plan[1],
dem = 1 / (1 + sum(rvote, na.rm=T) / sum(dvote, na.rm=T)),
is_coverage=coverage) %>%
ggplot(aes(fill={{ qty }})) +
geom_sf(size=0.0) +
geom_sf(data=places, inherit.aes=FALSE, fill="#00000033", color=NA) +
geom_sf(fill=NA, size=0.4, color="black") +
geom_sf(data=counties, inherit.aes=FALSE, fill=NA, size=0.45, color="#ffffff2A") +
{if (city) ggrepel::geom_text_repel(aes(label=NAME, geometry=geometry),
data=cities, color="#000000", fontface="bold",
size=3.5, inherit.aes=FALSE, stat="sf_coordinates")} +
scale +
theme_void() +
theme(legend.key.size=unit(0.75, "cm"))
}
## Set to state you'd like to plot abbr
abbr <- "OR"
### Data from here: https://github.com/alarm-redist/fifty-states
map <- read_rds(paste("../data/",abbr,"_cd_2020_map.rds", sep = ""))
plans <- read_rds(paste("../data/",abbr,"_cd_2020_plans.rds", sep = ""))
stats <- read.csv(paste("../data/",abbr,"_cd_2020_stats.csv", sep = ""))
# set up data for mapping
state_plans <- left_join(plans, stats, by = c("draw","district","total_pop"))
m <- as.matrix(state_plans)
n_ref = redist:::get_n_ref(state_plans)
N = ncol(m) - n_ref
# plot 2020 enacted plan
enacted <- plot_cds(map, map$cd_2020, county, abbr, "dem") +
labs(title=~underline("Current Plan"))
enacted
# plot 2020 enacted plan
enacted <- plot_cds(map, map$cd_2020, county, abbr, "dem")
enacted
# plot 2020 enacted plan
png(file=paste(abbr,"_enacted.png", sep = ""))
plot_cds(map, map$cd_2020, county, abbr, "dem")
dev.off()
# plot first 50 simulations
idxs = seq(1:3)
for (i in idxs){
png(file=paste(abbr,"_draw_",i,".png", sep = ""))
plot_cds(oregon_map, m[, i], county, abbr, "dem")
dev.off()
}
# plot first 50 simulations
idxs = seq(1:3)
for (i in idxs){
png(file=paste(abbr,"_draw_",i,".png", sep = ""))
plot_cds(map, m[, i], county, abbr, "dem")
dev.off()
}
plot_cds(map, m[, i], county, abbr, "dem")
i
plot_cds(map, m[, i], county, abbr, "dem")
paste(abbr,"_draw_",i,".png", sep = "")
# plot first 50 simulations
idxs = seq(1:1)
for (i in idxs){
png(file=paste(abbr,"_draw_",i,".png", sep = ""))
plot_cds(map, m[, i], county, abbr, "dem")
dev.off()
}
paste(abbr,"_draw_",i,".png", sep = "")
# plot first 50 simulations
idxs = seq(1:1)
for (i in idxs){
png(file=paste(abbr,"_draw_",i,".png", sep = ""))
plot_cds(map, m[, i], county, abbr, "dem")
#dev.off()
}
dev.off
# plot first 50 simulations
idxs = seq(1:1)
for (i in idxs){
png(file=paste(abbr,"_draw_",i,".png", sep = ""))
plot_cds(map, m[, i], county, abbr, "dem")
dev.off()
}
# plot first 50 simulations
idxs = seq(1:1)
for (i in idxs){
png(file=paste(abbr,"_draw_",i,".png", sep = ""))
plot_cds(map, m[, i], county, abbr, "dem")
dev.off()
}
m[, i]
map$cd_2020
?png
# plot first 50 simulations
idxs = seq(1:1)
for (i in idxs){
png(file=paste(abbr,"_draw_",i,".png", sep = ""), restoreConsole = TRUE)
plot_cds(map, m[, i], county, abbr, "dem")
dev.off()
}
ggsave(plot_cds(map, m[, i], county, abbr, "dem"), file="test")
test_plot <- plot_cds(map, m[, i], county, abbr, "dem")
ggsave(test_plot, file="test.png")
test_plot <- plot_cds(map, m[, 2], county, abbr, "dem")
ggsave(test_plot, file="test.png")
# plot first 50 simulations
idxs = seq(1:1)
for (i in idxs){
#png(file=paste(abbr,"_draw_",i,".png", sep = ""))
#  plot_cds(map, m[, i], county, abbr, "dem")
#dev.off()
plot_i <- plot_cds(map, m[, i], county, abbr, "dem")
ggsave(plot_i, file=paste(abbr,"_draw_",i,".png", sep = ""))
}
# plot first 50 simulations
idxs = seq(1:3)
for (i in idxs){
#png(file=paste(abbr,"_draw_",i,".png", sep = ""))
#  plot_cds(map, m[, i], county, abbr, "dem")
#dev.off()
plot_i <- plot_cds(map, m[, i], county, abbr, "dem")
ggsave(plot_i, file=paste(abbr,"_draw_",i,".png", sep = ""))
}
# plot first 50 simulations (ignore first one, which is enacted map)
idxs = seq(2:51)
for (i in idxs){
plot_i <- plot_cds(map, m[, i], county, abbr, "dem")
ggsave(plot_i, file=paste(abbr,"_draw_",i,".png", sep = ""))
}
dev.off()
